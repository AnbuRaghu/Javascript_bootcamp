catch errors with async await
-------------------------------

to habdle errors in async await we can use try catch block.it's used to catch errors asyncronously as well as syncronously

catching syncronous error
--------------------------
e.g
async function runAsync() {
  try { 
    await Promise.resolve('hello world'); 
    null.someProperty = true; // here we get error
  } catch (error) {
    console.error(error); 
  }  
}

runAsync();// !TypeError: Cannot set property 'someProperty' of null

catching errors asyncronously
---------------------------------
async function runAsync() {
  try { 
    await Promise.reject(Error('Oops')); 
     
  } catch (error) {
    console.error(error); 
  }  
}

runAsync();

the await key word is the only thing that converted rejected promises into catchable errors:

if we don't use await we can't catch errors like in the example below
async function runAsync() {
  try { 
    return Promise.reject(Error('Oops')); 
    // null.someProperty = true; 
  } catch (error) {
    console.error(error); 
  }  
}

runAsync();
but we can simply fix it by adding an await  before it in the example below
async function runAsync() {
  try { 
    return await Promise.reject(Error('Oops')); 
    // null.someProperty = true; 
  } catch (error) {
    console.error(error); 
  }  
}

runAsync();

in addition to try catch we can use another pattern to catch errors..it works based on the fact that every function appended with async will return promises.we can do this by chaining catch when calling the function like below

async function runAsync() {
  return await Promise.reject(Error('Oops')); 
}

runAsync().catch(error => console.error(error));


handling errors in network request
------------------------------------------------------
async function getGithubUser() {
    
    try{
        const response = await fetch('https://jsonplaceholder.typicode.com/poss/1');
        const res= await response.json()
          if(!response.ok){
              throw new Error(response.status)
          }
          console.log(res)
    }
  catch(error){
    console.log(error)
}
  
}

getGithubUser()