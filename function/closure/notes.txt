closure
-------------

The closure is a function that accesses its lexical scope even executed outside of its lexical scope.
// 1) Closures are a property of JavaScript functions
// 2) Call function in different scope than where function was original defined

// why closures is matters becz it allows us to remember values

in closure Lexical scop plays an important role
---------------------------------------------------
JavaScript implements a scoping mechanism named lexical scoping (or static scoping). Lexical scoping means that the accessibility of variables is determined by the position of the variables inside the nested scopes.
Simpler, the lexical scoping means that inside the inner scope you can access variables of outer scopes.

In other words, here in this addLike() closes over (a.k.a. captures, remembers) the variable likeCount from its lexical scope.



function handleLikePost() {
  let likeCount = 0;
  return function addLike() {
    likeCount += 1;    
    return likeCount;
  }
//   addLike();
  console.log('like count:', likeCount);
}

const doubleLike = handleLikePost();

console.log(doubleLike());
console.log(doubleLike());
console.log(doubleLike());



e.g1
function handleLikePost() {
  let likeCount = 0;
  likeCount += 1;  
  console.log('like count:', likeCount);
}

handleLikePost();
handleLikePost();
handleLikePost();

here we can't preserve the likecount value it alwasy says 1